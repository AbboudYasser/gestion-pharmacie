# ملف GitHub Actions النهائي: ينشئ config.js ثم يبني المشروع بشكل صحيح
name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # دمج كل شيء في مهمة واحدة لتجنب الأخطاء
  build-and-deploy:
    name: 🔨 Build and Deploy
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    # 1. تحميل الكود
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    # 2. إنشاء ملف config.js من الأسرار
    - name: 🤫 Create config.js from Secrets
      run: |
        echo "🔐 Creating config.js file from GitHub Secrets..."
        mkdir -p frontend/js
        # كتابة محتوى الملف باستخدام الأسرار
            - name: 🤫 Create config.js from Secrets
      run: |
        # إنشاء مجلد js إذا لم يكن موجودًا
        mkdir -p frontend/js

        # كتابة الأسرار في ملف config.js
        # لاحظ أننا نستخدم secrets.* لكل شيء الآن
        echo "const SUPABASE_URL = '${{ secrets.SUPABASE_URL }}';" > frontend/js/config.js
        echo "const SUPABASE_ANON_KEY = '${{ secrets.SUPABASE_ANON_KEY }}';" >> frontend/js/config.js
        echo "const SUPABASE_PROJECT_ID = '${{ secrets.SUPABASE_PROJECT_ID }}';" >> frontend/js/config.js
        echo "const EMAILJS_SERVICE_ID = '${{ secrets.EMAILJS_SERVICE_ID }}';" >> frontend/js/config.js
        echo "const EMAILJS_TEMPLATE_ID = '${{ secrets.EMAILJS_TEMPLATE_ID }}';" >> frontend/js/config.js
        echo "const EMAILJS_PUBLIC_KEY = '${{ secrets.EMAILJS_PUBLIC_KEY }}';" >> frontend/js/config.js

        echo "const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);" >> frontend/js/config.js
        echo "console.log('✅ Supabase config loaded successfully from secrets.');" >> frontend/js/config.js
        echo "✅ config.js created successfully."

    # 3. إعداد GitHub Pages (خطوة تحضيرية)
    - name: ⚙️ Setup Pages
      uses: actions/configure-pages@v5

    # 4. بناء الموقع: نسخ محتويات frontend إلى مجلد النشر
    # ✨✨✨ هذه هي الخطوة الحاسمة التي أعيدت ✨✨✨
    - name: 🏗️ Build Project by copying frontend contents
      run: |
        # إنشاء مجلد النشر الافتراضي الذي تبحث عنه GitHub Pages
        mkdir -p _site
        
        # نسخ كل محتويات مجلد frontend (بما في ذلك config.js الذي تم إنشاؤه) إلى مجلد النشر
        cp -r frontend/* _site/
        
        # إنشاء ملف .nojekyll لمنع GitHub من معالجة الموقع كمدونة Jekyll
        touch _site/.nojekyll

    # 5. رفع ناتج البناء كـ "artifact" لـ GitHub Pages
    - name: 📤 Upload Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './_site'

    # 6. نشر الموقع على GitHub Pages
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
